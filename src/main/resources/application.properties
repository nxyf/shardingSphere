
# 配置数据库名称，水平分库分表，配置两个数据源
#spring.shardingsphere.datasource.names=ds1,ds2,ds3,s1
spring.shardingsphere.datasource.names=ds1,ds2,ds3

# 一个实体类对应两张表 覆盖
spring.main.allow-bean-definition-overriding=true

# 配置数据源
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://10.33.2.127:3306/edu_db_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

# 配置数据源
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://10.33.2.127:3306/edu_db_2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=root

# 配置数据源  公用 也为读写分离主服务器
spring.shardingsphere.datasource.ds3.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds3.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds3.url=jdbc:mysql://10.33.2.127:3306/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds3.username=root
spring.shardingsphere.datasource.ds3.password=root

# 读写分离  配置从数据源
#spring.shardingsphere.datasource.s1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.s1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.s1.url=jdbc:mysql://192.168.10.19:3307/user_db?serverTimezone=GMT%2B8
#spring.shardingsphere.datasource.s1.username=root
#spring.shardingsphere.datasource.s1.password=root

# 主从数据源逻辑定义，ds0为user_db
#spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=ds3
#spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=s1

# 配置user_db数据库里面t_user分表策略，固定分配至ds0的t_user真实表
#spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds0.t_user

# 配置公共表
spring.shardingsphere.sharding.broadcast-tables=t_udict
spring.shardingsphere.sharding.tables.t_udict.key-generator.column=dict_id
spring.shardingsphere.sharding.tables.t_udict.key-generator.type=SNOWFLAKE

# 配置user_db数据库里面t_user专库专表
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{3}.t_user

# 指定course表中主键cid 生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE

# 分表策略
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user

# 标准分片表配置  数据库、表分布情况
spring.shardingsphere.sharding.tables.course.actual-data-nodes=ds$->{1..2}.course_$->{1..2}

# 指定course表中主键cid 生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 分表策略
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}

# 分库策略，默认所有库按照此策略
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}

# 分库策略,只有course表按照此规则存储
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=ds$->{user_id % 2 + 1}

# 打开sql输出日志
spring.shardingsphere.props.sql.show=true

mybatis-plus.mapper-locations=classpath:mapper/**/*.xml